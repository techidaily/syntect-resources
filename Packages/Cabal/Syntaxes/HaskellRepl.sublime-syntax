%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Haskell Repl
scope: source.haskell-repl
contexts:
  main:
    - match: '^([\w\s\.\*]+)([\|>])\s*(:[tik])?'
      captures:
        1: support.function.prompt.ghci
        2: keyword.operator.prompt.ghci
        3: keyword.other.command.ghci
      push:
        - meta_scope: support.other.ghci
        - match: $\n?
          pop: true
        - include: type_declaration
        - include: function_signature
        - include: commands
        - include: import_statement
        - include: expression_stuff
    - match: ^(.*:\d+:\d+:)
      captures:
        1: constant.other.ghci
      push:
        - meta_scope: support.message.ghci
        - match: $\n?
          pop: true
        - match: .*
          scope: comment.message.other.ghci
    - match: ^\s+.*$
      scope: string.message.ghci
    - match: \s(:\w+)\s
      scope: support.command-line.ghci
      captures:
        1: support.function.command.ghci
    - match: \s(:)\s*$
      scope: operator.ghci
      captures:
        1: keyword.operator.ghci
    - match: ^.*>\s(:!.*)$
      scope: keyword.command.ghci
      captures:
        1: keyword.shell-command.ghci
    - include: messages
    - include: type_declarations
    - include: function_declarations
    - include: expression_stuff
    - match: ':\{'
      push:
        - meta_scope: multiline.input.haskell
        - match: ':\}'
          pop: true
        - match: '^([\s\.\s\*]*)(\|)'
          push:
            - meta_scope: input.other.ghci
            - match: $\n?
              pop: true
            - include: type_declarations
            - include: function_declarations
            - include: expression_stuff
    - include: pragma
  block_comment:
    - match: '\{-(?!#)'
      captures:
        0: punctuation.comment.haskell
      push:
        - meta_scope: comment.block.haskell
        - include: block_comment
        - include: comments
        - match: '(?<!#)-\}'
          captures:
            0: punctuation.comment.haskell
          pop: true
  class_declaration:
    - match: '^(\s*)(class)(?:\s+([A-Z][\w'']*))?\b'
      captures:
        2: keyword.declaration.class.haskell
        3: entity.name.type.haskell
      push:
        - meta_scope: meta.declaration.class.haskell
        - match: \b(where)\b|(^(?!\1\s))
          captures:
            1: keyword.declaration.class.haskell
          pop: true
        - match: '(=>|⇒)\s+([A-Z][\w'']*)'
          scope: meta.declaration.class.name
          captures:
            1: keyword.operator.haskell
            2: entity.name.type.haskell
        - include: type
  commands:
    - match: (:browse)\s+
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: command.other.ghci
        - match: $\n?
          pop: true
        - include: module_name
    - match: '(:([\{\}\!\?]|\w+)?)\s+'
      captures:
        1: keyword.other.haskell
      push:
        - meta_scope: command.other.ghci
        - match: $\n?
          pop: true
  comments:
    - match: '(---*(?!([!#\$%&\*\+\./<=>\?@\\\^\|\-~:]|[^[^\p{S}\p{P}]_"''\(\),;\[\]`\{}]))).*$\n?'
      scope: comment.line.haskell
      captures:
        1: punctuation.comment.haskell
    - include: block_comment
  common_keywords:
    - match: \b(where|case|of|let|in|default|do|mdo|if|then|else|rec|proc)\b
      scope: keyword.other.haskell
  constructor_signature:
    - match: '^(\s+)([A-Z][\w'']*|\(\W+\))\s*((::)|∷)'
      captures:
        2: entity.name.function.haskell entity.name.constructor.haskell
        3: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.declaration.function.haskell
        - match: ^(?!\1\s)
          pop: true
        - include: type
  ctor_names:
    - match: '(?<!'')\b[A-Z][\w'']*'
      scope: constant.other.haskell entity.name.constructor.haskell
    - match: \(\)
      scope: constant.other.haskell entity.name.constructor.haskell
  data_declaration:
    - match: '^(\s*)(data|newtype)\s+([A-Z][\w'']*)?'
      captures:
        2: keyword.declaration.data.haskell
        3: constant.other.haskell entity.name.type.haskell
      push:
        - meta_scope: meta.declaration.data.haskell
        - match: ^(?!\1\s)
          pop: true
        - match: where
          scope: keyword.declaration.data.haskell
        - match: '([=\|])'
          captures:
            1: keyword.operator.haskell
          push:
            - match: '(?<!'')\b([A-Z][\w'']*)'
              captures:
                1: constant.other.haskell entity.name.constructor.haskell
              pop: true
            - include: comments
        - include: deriving
        - include: constructor_signature
        - include: record_declaration
        - include: comments
        - include: type
  deriving:
    - match: \b(deriving)\b
      scope: keyword.other.haskell keyword.declaration.data.haskell
  expression_stuff:
    - match: '([A-Z][\w'']*\.)+'
      scope: storage.module.haskell entity.name.module.haskell
    - match: \b(abs|acos|acosh|all|and|any|appendFile|asTypeOf|asin|asinh|atan|atan2|atanh|break|ceiling|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b
      scope: support.function.prelude.haskell
    - match: \b(error|undefined)\b
      scope: support.function.prelude.haskell invalid.haskell
    - include: infix_op
    - match: '\[|\]'
      comment: List
      scope: keyword.operator.haskell punctuation.list.haskell
    - match: ","
      scope: punctuation.separator.comma.haskell
    - match: '(`)([A-Z][\w'']*\.)*[a-z][\w'']*(`)'
      comment: "In case this regex seems unusual for an infix operator, note that Haskell allows
      any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression
      (4 `elem` [1..10])."
      scope: keyword.operator.function.infix.haskell
      captures:
        1: punctuation.definition.entity.haskell
        3: punctuation.definition.entity.haskell
    - match: '(\{)(?!-)'
      captures:
        1: keyword.operator.haskell punctuation.record.haskell
      push:
        - meta_scope: record.expression.haskell
        - match: '(?<!-)(\})'
          captures:
            1: keyword.operator.haskell punctuation.record.haskell
          pop: true
        - match: '(?<!'')\b[a-z][\w'']+\s+(=)'
          captures:
            2: keyword.operator.haskell
        - include: expression_stuff
    - match: \(\)
      scope: constant.other.haskell entity.name.constructor.haskell
    - match: '\[\]'
      scope: constant.other.haskell entity.name.constructor.haskell
    - include: comments
    - match: '[@|!%$?~+:.\-*=</>\\∘→⇒⇔←⤙⇐≤≥≡⋮\[\]]+'
      comment: In case this regex seems overly general, note that Haskell permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&*.
      scope: keyword.operator.haskell
    - include: common_keywords
    - include: literals
    - include: quasi_quote
    - include: ctor_names
  field_signature:
    - match: (?=.*?((::)|∷))
      push:
        - meta_scope: meta.declaration.field.haskell
        - match: "(?=[,}])"
          pop: true
        - match: ((::)|∷)
          captures:
            1: keyword.other.double-colon.haskell
          push:
            - meta_scope: meta.declaration.field.signature.haskell
            - match: "(?=[,}])"
              pop: true
            - include: type
        - match: '((?<!'')\b[a-z_][\w'']*|\(\W+\))'
          scope: entity.name.function.haskell
  fixity_declaration:
    - match: '\binfix[lr]?\b'
      scope: keyword.declaration.fixity.haskell
  foreign_function_signature:
    - match: '(\s*)([a-z_][\w'']*|\(\W+\))\s*((::)|∷)'
      captures:
        2: entity.name.function.haskell
        3: keyword.other.double-colon.haskell
      push:
        - meta_scope: meta.declaration.function.haskell
        - match: ^(?!\s)
          pop: true
        - include: type
  function_declarations:
    - include: function_signature
    - include: function_definition
    - include: infix_function_definition
    - include: fixity_declaration
  function_definition:
    - match: '^\s*(?<!'')\b([a-z_][\w'']*|\(\W+\))\s+(?![^\w\s=''"\(\[])(?=(([\w\s\.,''"]*|\(.*\)|\[.*\])\s+)*=)'
      captures:
        1: entity.name.function.haskell
      push:
        - meta_scope: meta.definition.function.haskell
        - match: (=)
          captures:
            1: keyword.operator.haskell
          pop: true
        - include: expression_stuff
  function_signature:
    - match: '^(\s*)(?!--)(?:(\(\W\)|[\w'']+)|[\(\[])(?=[\w'',\s\[\]\(\)]*((?:::)|∷))'
      captures:
        2: entity.name.function.haskell
      push:
        - meta_scope: meta.declaration.function.haskell
        - match: '^(?!\1\s)|(?=})'
          pop: true
        - match: (?=.*((::)|∷))
          push:
            - meta_scope: meta.declaration.function.names.haskell
            - match: ((::)|∷)
              captures:
                1: keyword.other.double-colon.haskell
              pop: true
            - match: '((?<!'')\b[a-z_][\w'']*|\(\W+\))'
              scope: entity.name.function.haskell
        - include: type
  import_statement:
    - match: \b(import)\b
      captures:
        1: keyword.other.haskell keyword.import.haskell
      push:
        - meta_scope: meta.import.haskell
        - match: ($|;)
          pop: true
        - match: (qualified|as|hiding)
          scope: keyword.other.haskell keyword.import.haskell
        - include: module_name
        - include: module_exports
  infix_function_definition:
    - match: '^\s*(?=(([\w''\.''"]+|\(.*\)|\[.*\])\s+)+([^\w\s''"`\(\)]+|`[a-z][\w'']*`).*=)'
      push:
        - meta_scope: meta.definition.function.haskell
        - match: '([^\w\s\.''"`]+|`[a-z][\w'']*`)'
          captures:
            1: entity.name.function.haskell
          pop: true
        - include: expression_stuff
  infix_op:
    - match: '(\([^\w \)]+\)|\(,+\))'
      scope: keyword.operator.haskell
  instance_declaration:
    - match: ^(\s*)(instance)\b
      captures:
        2: keyword.declaration.instance.haskell
      push:
        - meta_scope: meta.declaration.instance.haskell
        - match: \b(where)\b|(^(?!\1\s))
          captures:
            1: keyword.declaration.instance.haskell
          pop: true
        - include: type
        - include: comments
  literals:
    - match: '\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b'
      comment: Floats are always decimal
      scope: constant.numeric.haskell
    - match: '\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b'
      scope: constant.numeric.haskell
    - match: '"'
      push:
        - meta_scope: string.quoted.double.haskell
        - match: '"'
          pop: true
        - match: '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"''\&])'
          scope: constant.character.escape.haskell
        - match: '\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+'
          scope: constant.character.escape.octal.haskell
        - match: '\^[A-Z@\[\]\\\^_]'
          scope: constant.character.escape.control.haskell
    - match: |-
        (?x)
        (')
        (?:
          [\ -&(-\[\]-~"]               # Basic Char
          | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
            |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
            |US|SP|DEL|[abfnrtv\\\"'\&]))   # Escapes
          | (\\o[0-7]+)               # Octal Escapes
          | (\\x[0-9A-Fa-f]+)           # Hexadecimal Escapes
          | (\^[A-Z@\[\]\\\^_])           # Control Chars
        )
        (')
      scope: string.quoted.single.haskell
      captures:
        2: constant.character.escape.haskell
        3: constant.character.escape.octal.haskell
        4: constant.character.escape.hexadecimal.haskell
        5: constant.character.escape.control.haskell
  messages:
    - match: ^(Loading|GHCi)\b
      push:
        - meta_scope: comment.message.ghci
        - match: $
          pop: true
    - match: ^(Ok, modules loaded)\b
      push:
        - meta_scope: comment.message.ghci
        - match: $
          pop: true
        - include: module_name
    - match: '\[(\d+) of (\d+)\] Compiling (\w+)'
      captures:
        1: constant.numeric.haskell
        2: constant.numeric.haskell
        3: storage.module.haskell
      push:
        - meta_scope: comment.message.ghci
        - match: $
          pop: true
  module_exports:
    - match: (\()
      captures:
        1: storage.module.haskell
      push:
        - meta_scope: meta.declaration.exports.haskell
        - match: (\))
          captures:
            1: storage.module.haskell
          pop: true
        - match: \\\s*$
          push:
            - meta_scope: constant.character.escape.multilinestring.haskell
            - match: \\
              pop: true
        - match: '(?<!'')\b[a-z][\w'']*'
          scope: variable.function.haskell
        - match: '(?<!'')\b([A-Z][\w'']*)\s*(\()'
          captures:
            1: storage.type.haskell storage.data.haskell
            2: keyword.operator.haskell
          push:
            - meta_scope: meta.declaration.export.data.haskell
            - match: (\))
              captures:
                1: keyword.operator.haskell
              pop: true
            - include: expression_stuff
        - match: '(?<!'')\b[A-Z][\w'']*'
          scope: storage.type.haskell storage.data.haskell
        - match: ","
          scope: punctuation.separator.comma.haskell
        - include: infix_op
        - match: \(.*?\)
          comment: So named because I don't know what to call this.
          scope: meta.other.unknown.haskell
        - include: module_exports
        - include: comments
  module_name:
    - match: '([A-Z][\w'']*)(\.[A-Z][\w'']*)*'
      scope: storage.module.haskell
  pattern_function_definition:
    - match: '^\s*(?=\(.*\)|\[.*\]|([A-Z][\w'']*(\s+([\w\s,'']*|\(.*\)|\[.*\]|\{.*\}))*)\s*=)'
      push:
        - meta_scope: meta.definition.function.haskell
        - match: (=)
          captures:
            1: keyword.operator.haskell
          pop: true
        - match: '(?<!'')\b([a-z_][\w'']*)\b'
          captures:
            1: entity.name.function.haskell
        - include: expression_stuff
  pragma:
    - match: '(\{-#)\s+([A-Z_]+)\b'
      captures:
        1: punctuation.pragma.haskell
        2: keyword.preprocessor.haskell pragma.name.haskell
      push:
        - meta_scope: pragma.haskell
        - match: '#-\}'
          pop: true
        - match: '\b([A-Z][a-z]*)+\b'
          scope: keyword.other.preprocessor.haskell pragma.support.language.haskell
        - match: "(-+[a-z]+)+"
          scope: keyword.other.preprocessor.haskell pragma.support.flag.haskell
  quasi_quote:
    - match: '(\[)([a-z][\w]*)?(\|)'
      captures:
        1: punctuation.quasi-quoter.haskell keyword.operator.haskell
        2: entity.name.function.haskell
        3: punctuation.quasi-quoter.haskell keyword.operator.haskell
      push:
        - meta_scope: string.quoted.quasi.haskell
        - match: '(\|\])'
          captures:
            1: punctuation.quasi-quoter.haskell keyword.operator.haskell
          pop: true
  record_declaration:
    - match: '(\{)(?!-)'
      captures:
        1: keyword.operator.haskell punctuation.record.haskell
      push:
        - meta_scope: meta.declaration.record.haskell
        - match: '(?<!-)(\})'
          captures:
            1: keyword.operator.haskell punctuation.record.haskell
          pop: true
        - include: field_signature
        - include: comments
  type:
    - match: "->|→"
      scope: keyword.operator.arrow.haskell
    - match: "=>|⇒"
      scope: keyword.operator.big-arrow.haskell
    - match: \b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b
      scope: storage.type.haskell support.type.haskell
    - match: '(?<!'')\b[a-z][\w'']*\b'
      scope: variable.generic.haskell
    - match: '(?<!'')\b[A-Z][\w'']*\b'
      scope: storage.type.haskell
    - match: \(\)
      scope: storage.type.haskell
    - match: (\()
      captures:
        1: keyword.operator.haskell
      push:
        - meta_scope: meta.type_signature.brace.haskell
        - match: (\))
          captures:
            1: keyword.operator.haskell
          pop: true
        - include: type
    - match: '(\[)'
      captures:
        1: keyword.operator.haskell
      push:
        - meta_scope: meta.type_signature.list.haskell
        - match: '(\])'
          captures:
            1: keyword.operator.haskell
          pop: true
        - include: type
    - include: comments
  type_declaration:
    - match: '^(\s*)(type)\s+([A-Z][\w'']*)?'
      captures:
        2: keyword.declaration.data.haskell
        3: entity.name.type.haskell
      push:
        - meta_scope: meta.declaration.type.haskell
        - match: ^(?!\1\s)
          pop: true
        - include: comments
        - match: "="
          scope: keyword.operator.haskell
        - include: type
  type_declarations:
    - include: data_declaration
    - include: type_declaration
    - include: class_declaration
    - include: instance_declaration
